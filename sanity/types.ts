/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  body?: BlockContent;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  publishedAt?: string;
};

export type Pots = {
  _id: string;
  _type: "pots";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  featured?: boolean;
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullname?: string;
  profileImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  availability?: "available" | "open" | "unavailable";
  email?: string;
  socialLinks?: {
    twitter?: string;
    instagram?: string;
  };
};

export type Artwork = {
  _id: string;
  _type: "artwork";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  year?: number;
  materials?: string;
  dimensions?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  category?: "Wall panels" | "Murals";
  available?: boolean;
  featured?: boolean;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = BlockContent | Blog | Pots | About | Artwork | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: artworksQuery
// Query: *[_type == "artwork"] | order(_createdAt desc) {  _id,  _createdAt,  _updatedAt,  title,  slug,  description,  year,  materials,  dimensions,  image,  category,  available,  featured}
export type ArtworksQueryResult = Array<{
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  year: number | null;
  materials: string | null;
  dimensions: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  category: "Murals" | "Wall panels" | null;
  available: boolean | null;
  featured: boolean | null;
}>;
// Variable: featuredArtworksQuery
// Query: *[_type == "artwork" && featured == true] | order(year desc) {  _id,  title,  slug,  description,  year,  materials,  dimensions,  image,  category,  available,  featured}
export type FeaturedArtworksQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  year: number | null;
  materials: string | null;
  dimensions: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  category: "Murals" | "Wall panels" | null;
  available: boolean | null;
  featured: boolean | null;
}>;
// Variable: artworkBySlugQuery
// Query: *[_type == "artwork" && slug.current == $slug][0] {  _id,  _createdAt,  _updatedAt,  title,  slug,  description,  year,  materials,  dimensions,  image,  category,  available,  featured}
export type ArtworkBySlugQueryResult = {
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  year: number | null;
  materials: string | null;
  dimensions: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  category: "Murals" | "Wall panels" | null;
  available: boolean | null;
  featured: boolean | null;
} | null;
// Variable: artworksByCategoryQuery
// Query: *[_type == "artwork" && category == $category] | order(year desc) {  _id,  title,  slug,  description,  year,  materials,  dimensions,  image,  category,  available,  featured}
export type ArtworksByCategoryQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  year: number | null;
  materials: string | null;
  dimensions: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  category: "Murals" | "Wall panels" | null;
  available: boolean | null;
  featured: boolean | null;
}>;
// Variable: recentArtworksQuery
// Query: *[_type == "artwork" && title != null] | order(year desc) [0...$limit] {  _id,  title,  slug,  description,  year,  materials,  dimensions,  image,  category,  available,  featured}
export type RecentArtworksQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  year: number | null;
  materials: string | null;
  dimensions: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  category: "Murals" | "Wall panels" | null;
  available: boolean | null;
  featured: boolean | null;
}>;
// Variable: potsQuery
// Query: *[_type == "pots"] | order(_createdAt desc) {  _id,  _createdAt,  _updatedAt,  image,  featured}
export type PotsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  featured: boolean | null;
}>;
// Variable: featuredPotsQuery
// Query: *[_type == "pots" && featured == true] | order(_createdAt desc) {  _id,  image,  featured}
export type FeaturedPotsQueryResult = Array<{
  _id: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  featured: boolean | null;
}>;
// Variable: blogPostsQuery
// Query: *[_type == "blog"] | order(publishedAt desc) {  _id,  _createdAt,  _updatedAt,  title,  slug,  excerpt,  body,  featuredImage,  publishedAt}
export type BlogPostsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  body: BlockContent | null;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  publishedAt: string | null;
}>;
// Variable: blogPostBySlugQuery
// Query: *[_type == "blog" && slug.current == $slug][0] {  _id,  _createdAt,  _updatedAt,  title,  slug,  excerpt,  body,  featuredImage,  publishedAt}
export type BlogPostBySlugQueryResult = {
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  body: BlockContent | null;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  publishedAt: string | null;
} | null;
// Variable: recentBlogPostsQuery
// Query: *[_type == "blog"] | order(publishedAt desc) [0...$limit] {  _id,  title,  slug,  excerpt,  featuredImage,  publishedAt}
export type RecentBlogPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  featuredImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  publishedAt: string | null;
}>;
// Variable: blogSlugsQuery
// Query: *[_type == "blog" && defined(slug.current)].slug.current
export type BlogSlugsQueryResult = Array<string | null>;
// Variable: aboutQuery
// Query: *[_type == "about"][0] {  _id,  _createdAt,  _updatedAt,  fullname,  profileImage,  bio,  availability,  email,  socialLinks}
export type AboutQueryResult = {
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  fullname: string | null;
  profileImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  bio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  availability: "available" | "open" | "unavailable" | null;
  email: string | null;
  socialLinks: {
    twitter?: string;
    instagram?: string;
  } | null;
} | null;
// Variable: artworkSlugsQuery
// Query: *[_type == "artwork" && defined(slug.current)].slug.current
export type ArtworkSlugsQueryResult = Array<string | null>;
// Variable: potSlugsQuery
// Query: *[_type == "pots"]._id
export type PotSlugsQueryResult = Array<string>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"artwork\"] | order(_createdAt desc) {\n  _id,\n  _createdAt,\n  _updatedAt,\n  title,\n  slug,\n  description,\n  year,\n  materials,\n  dimensions,\n  image,\n  category,\n  available,\n  featured\n}": ArtworksQueryResult;
    "*[_type == \"artwork\" && featured == true] | order(year desc) {\n  _id,\n  title,\n  slug,\n  description,\n  year,\n  materials,\n  dimensions,\n  image,\n  category,\n  available,\n  featured\n}": FeaturedArtworksQueryResult;
    "*[_type == \"artwork\" && slug.current == $slug][0] {\n  _id,\n  _createdAt,\n  _updatedAt,\n  title,\n  slug,\n  description,\n  year,\n  materials,\n  dimensions,\n  image,\n  category,\n  available,\n  featured\n}": ArtworkBySlugQueryResult;
    "*[_type == \"artwork\" && category == $category] | order(year desc) {\n  _id,\n  title,\n  slug,\n  description,\n  year,\n  materials,\n  dimensions,\n  image,\n  category,\n  available,\n  featured\n}": ArtworksByCategoryQueryResult;
    "*[_type == \"artwork\" && title != null] | order(year desc) [0...$limit] {\n  _id,\n  title,\n  slug,\n  description,\n  year,\n  materials,\n  dimensions,\n  image,\n  category,\n  available,\n  featured\n}": RecentArtworksQueryResult;
    "*[_type == \"pots\"] | order(_createdAt desc) {\n  _id,\n  _createdAt,\n  _updatedAt,\n  image,\n  featured\n}": PotsQueryResult;
    "*[_type == \"pots\" && featured == true] | order(_createdAt desc) {\n  _id,\n  image,\n  featured\n}": FeaturedPotsQueryResult;
    "*[_type == \"blog\"] | order(publishedAt desc) {\n  _id,\n  _createdAt,\n  _updatedAt,\n  title,\n  slug,\n  excerpt,\n  body,\n  featuredImage,\n  publishedAt\n}": BlogPostsQueryResult;
    "*[_type == \"blog\" && slug.current == $slug][0] {\n  _id,\n  _createdAt,\n  _updatedAt,\n  title,\n  slug,\n  excerpt,\n  body,\n  featuredImage,\n  publishedAt\n}": BlogPostBySlugQueryResult;
    "*[_type == \"blog\"] | order(publishedAt desc) [0...$limit] {\n  _id,\n  title,\n  slug,\n  excerpt,\n  featuredImage,\n  publishedAt\n}": RecentBlogPostsQueryResult;
    "*[_type == \"blog\" && defined(slug.current)].slug.current": BlogSlugsQueryResult;
    "*[_type == \"about\"][0] {\n  _id,\n  _createdAt,\n  _updatedAt,\n  fullname,\n  profileImage,\n  bio,\n  availability,\n  email,\n  socialLinks\n}": AboutQueryResult;
    "*[_type == \"artwork\" && defined(slug.current)].slug.current": ArtworkSlugsQueryResult;
    "*[_type == \"pots\"]._id": PotSlugsQueryResult;
  }
}
